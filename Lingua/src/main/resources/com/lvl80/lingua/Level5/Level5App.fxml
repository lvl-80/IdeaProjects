<?xml version="1.0" encoding="UTF-8"?>

<?import javafx.geometry.Insets?>
<?import javafx.scene.Cursor?>
<?import javafx.scene.control.Button?>
<?import javafx.scene.control.Label?>
<?import javafx.scene.control.RadioButton?>
<?import javafx.scene.control.ScrollPane?>
<?import javafx.scene.control.TextArea?>
<?import javafx.scene.control.TextField?>
<?import javafx.scene.layout.AnchorPane?>
<?import javafx.scene.layout.VBox?>
<?import javafx.scene.text.Font?>

<AnchorPane maxHeight="-Infinity" maxWidth="-Infinity" minHeight="-Infinity" minWidth="-Infinity" prefHeight="728.0" prefWidth="915.0" xmlns="http://javafx.com/javafx/18" xmlns:fx="http://javafx.com/fxml/1" fx:controller="com.lvl80.lingua.Level5.Level5AppController">
   <children>
      <VBox prefHeight="728.0" prefWidth="263.0" style="-fx-background-color: black;">
         <padding>
            <Insets left="25.0" top="135.0" />
         </padding>
         <children>
            <Button alignment="TOP_LEFT" mnemonicParsing="false" onAction="#showSubtheme1" prefHeight="24.0" prefWidth="265.0" styleClass="theme_button" stylesheets="@css/Level5App.css" text="Обработка сключений" textFill="WHITE" />
            <Button alignment="TOP_LEFT" mnemonicParsing="false" onAction="#showSubtheme2" prefHeight="24.0" prefWidth="265.0" styleClass="theme_button" stylesheets="@css/Level5App.css" text="Множество исключений" textFill="WHITE" />
            <Button alignment="TOP_LEFT" mnemonicParsing="false" onAction="#showSubtheme3" prefHeight="29.0" prefWidth="238.0" styleClass="theme_button" stylesheets="@css/Level5App.css" text="Потоки" textFill="WHITE" wrapText="true" />
            <Button alignment="TOP_LEFT" mnemonicParsing="false" onAction="#showSubtheme4" prefHeight="55.0" prefWidth="238.0" styleClass="theme_button" stylesheets="@css/Level5App.css" text="Runtime против Checked Исключений" textFill="WHITE" wrapText="true" />
            <Button alignment="TOP_LEFT" mnemonicParsing="false" onAction="#showSubtheme5" prefHeight="21.0" prefWidth="263.0" styleClass="theme_button" stylesheets="@css/Level5App.css" text="ArrayList" textAlignment="CENTER" textFill="WHITE" wrapText="true" />
            <Button alignment="TOP_LEFT" mnemonicParsing="false" onAction="#showSubtheme6" prefHeight="24.0" prefWidth="265.0" styleClass="theme_button" stylesheets="@css/Level5App.css" text="LinkedLists" textFill="WHITE" />
            <Button alignment="TOP_LEFT" mnemonicParsing="false" onAction="#showSubtheme7" prefHeight="24.0" prefWidth="265.0" styleClass="theme_button" stylesheets="@css/Level5App.css" text="HashMap" textFill="WHITE" />
            <Button alignment="TOP_LEFT" mnemonicParsing="false" onAction="#showSubtheme8" prefHeight="24.0" prefWidth="265.0" styleClass="theme_button" stylesheets="@css/Level5App.css" text="Sets" textFill="WHITE" />
            <Button alignment="TOP_LEFT" mnemonicParsing="false" onAction="#showSubtheme9" prefHeight="26.0" prefWidth="238.0" styleClass="theme_button" stylesheets="@css/Level5App.css" text="Сортировка Списка" textFill="WHITE" wrapText="true" />
            <Button alignment="TOP_LEFT" mnemonicParsing="false" onAction="#showSubtheme10" prefHeight="24.0" prefWidth="265.0" styleClass="theme_button" stylesheets="@css/Level5App.css" text="Итераторы" textFill="WHITE" />
            <Button alignment="TOP_LEFT" mnemonicParsing="false" onAction="#showSubtheme11" prefHeight="24.0" prefWidth="265.0" styleClass="theme_button" stylesheets="@css/Level5App.css" text="Работа с файлами" textFill="WHITE" />
            <Button alignment="TOP_LEFT" mnemonicParsing="false" onAction="#showSubtheme12" prefHeight="24.0" prefWidth="265.0" styleClass="theme_button" stylesheets="@css/Level5App.css" text="Чтение Файла" textFill="WHITE" />
            <Button alignment="TOP_LEFT" mnemonicParsing="false" onAction="#showSubtheme13" prefHeight="24.0" prefWidth="265.0" styleClass="theme_button" stylesheets="@css/Level5App.css" text="Создание и записи Файлов" textFill="WHITE" />
            <Button alignment="TOP_LEFT" mnemonicParsing="false" onAction="#showSubtheme14" prefHeight="24.0" prefWidth="265.0" style="-fx-background-color: #fed15a; -fx-text-fill: black;" styleClass="theme_button" stylesheets="@css/Level5App.css" text="Тест" textFill="WHITE" />
         </children>
      </VBox>
      <AnchorPane layoutX="132.0" layoutY="12.0" prefHeight="22.0" prefWidth="0.0" style="-fx-background-color: white; -fx-background-radius: 30;">
         <children>
            <AnchorPane layoutX="-123.0" layoutY="-2.0" prefHeight="40.0" prefWidth="40.0" style="-fx-background-color: white; -fx-background-radius: 90;" styleClass="back_button" />
            <Label layoutX="-108.0" prefHeight="32.0" prefWidth="16.0" text="&lt;" textFill="#000001">
               <font>
                  <Font name="Bison Bold" size="28.0" />
               </font>
               <cursor>
                  <Cursor fx:constant="HAND" />
               </cursor>
            </Label>
            <Button layoutX="-122.0" layoutY="-2.0" mnemonicParsing="false" onAction="#backToLobby" opacity="0.0" prefHeight="40.0" prefWidth="40.0" textFill="WHITE">
               <cursor>
                  <Cursor fx:constant="HAND" />
               </cursor>
            </Button>
         </children>
      </AnchorPane>
      <ScrollPane fx:id="sp1" layoutX="261.0" layoutY="-2.0" prefHeight="736.0" prefWidth="680.0" visible="true">
        <content>
          <AnchorPane minHeight="0.0" minWidth="0.0" prefHeight="1346.0" prefWidth="662.0" style="-fx-background-color: white;">
               <children>
                  <Label layoutX="36.0" layoutY="45.0" styleClass="h1_" stylesheets="@css/Level5App.css" text="Исключения" />
                  <AnchorPane layoutX="36.0" layoutY="122.0" prefHeight="272.0" prefWidth="590.0" styleClass="block" stylesheets="@css/Level5App.css">
                     <children>
                        <Label layoutX="26.0" layoutY="14.0" prefHeight="242.0" prefWidth="539.0" styleClass="h2_" stylesheets="@css/Level5App.css" text="Исключение это проблема, возникающая во время выполнения программы. Исключения вызывают ненормальное завершение программы.   Обработка исключений является мощным механизмом, который обрабатывает ошибки времени выполнения для поддержки нормального потока приложения.  Исключения могут возникать по многим различным причинам. Несколько примеров: - Пользователь ввел неверную информацию. - Файл, который должен быть открыт, не найден. - В середине коммуникации было потеряно сетевое соединение. - Недостаток памяти и другие причины, относящиеся к физическим ресурсам." wrapText="true" />
                     </children>
                  </AnchorPane>
                  <Label layoutX="36.0" layoutY="427.0" prefHeight="30.0" prefWidth="292.0" styleClass="h1_" stylesheets="@css/Level5App.css" text="Обработка Исключений" />
                  <AnchorPane layoutX="36.0" layoutY="481.0" prefHeight="123.0" prefWidth="590.0" styleClass="block" stylesheets="@css/Level5App.css">
                     <children>
                        <Label layoutX="26.0" layoutY="14.0" prefHeight="93.0" prefWidth="545.0" styleClass="h2_" stylesheets="@css/Level5App.css" text="Исключения могут быть обработаны с помощью комбинации ключевых слов try и catch.  Блок try/catch размещается вокруг кода, который может сгенерировать исключение." wrapText="true" />
                     </children>
                  </AnchorPane>
                  <TextArea editable="false" layoutX="36.0" layoutY="613.0" prefHeight="127.0" prefWidth="487.0" styleClass="code" stylesheets="@css/Level5App.css" text="&#10;try { &#10;  //some code &#10;} catch (Exception e) { &#10;  //some code to handle errors &#10;}" />
                  <AnchorPane layoutX="36.0" layoutY="750.0" prefHeight="244.0" prefWidth="590.0" styleClass="block" stylesheets="@css/Level5App.css">
                     <children>
                        <Label layoutX="26.0" layoutY="14.0" prefHeight="211.0" prefWidth="545.0" styleClass="h2_" stylesheets="@css/Level5App.css" text="Оператор catch вовлекает объявление типа исключения, которое вы пытаетесь обработать. Если исключение возникает в блоке try, то будет проверен следующий за ним блок catch. Если тип возникшего исключения описан в блоке catch, то исключение передается в блок catch, так же, как передается аргумент в параметр метода.  Тип Exception может использоваться для обработки всех возможных исключений.  Нижеуказанный пример демонстрирует обработку исключения, при попытке получения доступа к несуществующему индексу массива:" wrapText="true" />
                     </children>
                  </AnchorPane>
                  <TextArea editable="false" layoutX="36.0" layoutY="1004.0" prefHeight="216.0" prefWidth="487.0" styleClass="code" stylesheets="@css/Level5App.css" text="&#10;public class MyClass {&#10;    public static void main(String[ ] args) {&#10;        try {&#10;            int a[ ] = new int[2];&#10;            System.out.println(a[5]);&#10;        } catch (Exception e) {&#10;            System.out.println(&quot;An error occurred&quot;);&#10;        }&#10;    }&#10;}" />
                  <AnchorPane layoutX="36.0" layoutY="1229.0" prefHeight="82.0" prefWidth="590.0" styleClass="block" stylesheets="@css/Level5App.css">
                     <children>
                        <Label layoutX="26.0" layoutY="14.0" prefHeight="46.0" prefWidth="545.0" styleClass="h2_" stylesheets="@css/Level5App.css" text="Без блока try/catch этот код разрушит программу, т.к. a[5] не существует." wrapText="true" />
                     </children>
                  </AnchorPane>
               </children></AnchorPane>
        </content>
      </ScrollPane>
      <ScrollPane fx:id="sp2" layoutX="261.0" layoutY="-1.0" prefHeight="730.0" prefWidth="680.0" visible="false">
         <content>
            <AnchorPane minHeight="0.0" minWidth="0.0" prefHeight="1094.0" prefWidth="662.0" style="-fx-background-color: white;">
               <children>
                  <Label layoutX="36.0" layoutY="45.0" prefHeight="30.0" prefWidth="442.0" styleClass="h1_" stylesheets="@css/Level5App.css" text="Множество исключений, throw" />
                  <AnchorPane layoutX="36.0" layoutY="122.0" prefHeight="182.0" prefWidth="590.0" styleClass="block" stylesheets="@css/Level5App.css">
                     <children>
                        <Label layoutX="26.0" layoutY="14.0" prefHeight="154.0" prefWidth="539.0" styleClass="h2_" stylesheets="@css/Level5App.css" text="Ключевое слово throw позволяет вам вручную генерировать исключения из ваших методов. Некоторые из множества доступных типов исключений включают IndexOutOfBoundsException, IllegalArgumentException, ArithmeticException, и другие.   Например, мы можем использовать исключение ArithmeticException в нашем методе, если параметр равен 0." wrapText="true" />
                     </children>
                  </AnchorPane>
                  <TextArea editable="false" layoutX="37.0" layoutY="315.0" prefHeight="306.0" prefWidth="565.0" styleClass="code" stylesheets="@css/Level5App.css" text="&#10;public class Program {&#10;&#10;    static int div(int a, int b) throws ArithmeticException {&#10;        if(b == 0) {&#10;            throw new ArithmeticException(&quot;Division by Zero&quot;);&#10;        } else {&#10;            return a / b;&#10;        }&#10;    }&#10;&#10;    public static void main(String[] args) {&#10;        System.out.println(div(42, 0));&#10;    }&#10;&#10;}" />
                  <AnchorPane layoutX="36.0" layoutY="632.0" prefHeight="216.0" prefWidth="590.0" styleClass="block" stylesheets="@css/Level5App.css">
                     <children>
                        <Label layoutX="26.0" layoutY="14.0" prefHeight="183.0" prefWidth="539.0" styleClass="h2_" stylesheets="@css/Level5App.css" text="Выражение throws в описании метода определяет тип исключения, которое может выбрасывать метод. Далее, ключевое слово throw бросает соответствующее исключение, вместе с определенным сообщением.  Если мы вызовем метод div со вторым параметром равным 0, то он выбросит исключение ArithmeticException с сообщением &quot;Division by Zero&quot;(Деление на Ноль).Один блок try может содержать множество блоков catch, которые отдельно обрабатывают различные исключения." wrapText="true" />
                     </children>
                  </AnchorPane>
                  <TextArea editable="false" layoutX="36.0" layoutY="860.0" prefHeight="208.0" prefWidth="487.0" styleClass="code" stylesheets="@css/Level5App.css" text="&#10;try { &#10;  //some code &#10;} catch (ExceptionType1 e1) { &#10;  //Catch block &#10;} catch (ExceptionType2 e2) { &#10;  //Catch block &#10;} catch (ExceptionType3 e3) { &#10;  //Catch block &#10;}" />
               </children>
            </AnchorPane>
         </content>
      </ScrollPane>
      <ScrollPane fx:id="sp3" layoutX="261.0" layoutY="-1.0" prefHeight="730.0" prefWidth="680.0" visible="false">
         <content>
            <AnchorPane minHeight="0.0" minWidth="0.0" prefHeight="1447.0" prefWidth="662.0" style="-fx-background-color: white;">
               <children>
                  <Label layoutX="36.0" layoutY="45.0" prefHeight="30.0" prefWidth="348.0" styleClass="h1_" stylesheets="@css/Level5App.css" text="Потоки" />
                  <AnchorPane layoutX="36.0" layoutY="122.0" prefHeight="298.0" prefWidth="590.0" styleClass="block" stylesheets="@css/Level5App.css">
                     <children>
                        <Label layoutX="26.0" layoutY="14.0" prefHeight="273.0" prefWidth="539.0" styleClass="h2_" stylesheets="@css/Level5App.css" text="Java является многопоточным языком программирования. Это значит, что наша программа может осуществлять оптимальное использование доступных ресурсов, запуская два и более компонентов одновременно, в то время, как каждый компонент обрабатывает разное задание.  Вы можете подразделить специфические операции внутри одного приложения в индивидуальные потоки, которые все запускаются параллельно.Существует два способа создать поток. 1. Расширение класса Thread Наследуйтесь от класса Thread, переопределите его метод run(), и напишите функциональность потока в методе run().  Затем вы создаете новый объект вашего класса и вызоваете метод start, чтобы запустить поток" wrapText="true" />
                     </children>
                  </AnchorPane>
                  <TextArea editable="false" layoutX="36.0" layoutY="434.0" prefHeight="255.0" prefWidth="573.0" styleClass="code" stylesheets="@css/Level5App.css" text="&#10;class Loader extends Thread {&#10;    public void run() {&#10;        System.out.println(&quot;Hello&quot;);&#10;    }&#10;}&#10;&#10;class MyClass {&#10;    public static void main(String[ ] args) {&#10;        Loader obj = new Loader();&#10;        obj.start();&#10;    }&#10;}" />
                  <AnchorPane layoutX="36.0" layoutY="705.0" prefHeight="228.0" prefWidth="590.0" styleClass="block" stylesheets="@css/Level5App.css">
                     <children>
                        <Label layoutX="26.0" layoutY="14.0" prefHeight="202.0" prefWidth="539.0" styleClass="h2_" stylesheets="@css/Level5App.css" text="Как видите, наш класс Loader расширяет класс Thread и переопределяет его метод run().  Когда мы создаем объект obj и вызываем его метод start(), выражения метода run() выполняются на другом потоке.Другим способом создания Потоков является реализация интерфейса Runnable.  Реализуйте метод run(). Затем, создайте новый объект Thread, передайте класс Runnable в его конструктор, и запустите поток, путем вызова метода start()." wrapText="true" />
                     </children>
                  </AnchorPane>
                  <TextArea editable="false" layoutX="36.0" layoutY="951.0" prefHeight="274.0" prefWidth="573.0" styleClass="code" stylesheets="@css/Level5App.css" text="&#10;class Loader implements Runnable {&#10;    public void run() {&#10;        System.out.println(&quot;Hello&quot;);&#10;    }&#10;}&#10;&#10;class MyClass {&#10;    public static void main(String[ ] args) {&#10;        Thread t = new Thread(new Loader());&#10;        t.start();&#10;    }&#10;}" />
                  <AnchorPane layoutX="36.0" layoutY="1250.0" prefHeight="169.0" prefWidth="590.0" styleClass="block" stylesheets="@css/Level5App.css">
                     <children>
                        <Label layoutX="26.0" layoutY="14.0" prefHeight="145.0" prefWidth="539.0" styleClass="h2_" stylesheets="@css/Level5App.css" text="Метод Thread.sleep() останавливает поток на определенный период времени. Например, вызов Thread.sleep(1000); останавливает поток на одну секунду. Не забывайте, что Thread.sleep() бросает исключение InterruptedException, так что убедитесь, что оно окружено блоком try/catch." wrapText="true" />
                     </children>
                  </AnchorPane>
               </children>
            </AnchorPane>
         </content>
      </ScrollPane>
      <ScrollPane fx:id="sp4" layoutX="263.0" layoutY="-2.0" prefHeight="735.0" prefWidth="680.0" visible="false">
         <content>
            <AnchorPane minHeight="0.0" minWidth="0.0" prefHeight="851.0" prefWidth="662.0" style="-fx-background-color: white;">
               <children>
                  <Label layoutX="36.0" layoutY="45.0" prefHeight="30.0" prefWidth="348.0" styleClass="h1_" stylesheets="@css/Level5App.css" text="Типы Исключений" />
                  <TextArea editable="false" layoutX="36.0" layoutY="325.0" prefHeight="196.0" prefWidth="522.0" styleClass="code" stylesheets="@css/Level5App.css" text="&#10;public class MyClass { &#10;  public static void main(String[ ] args) { &#10;    try { &#10;      Thread.sleep(1000); &#10;    } catch (InterruptedException e) { &#10;      //some code &#10;    } &#10;  } &#10;}" />
                  <AnchorPane layoutX="36.0" layoutY="103.0" prefHeight="211.0" prefWidth="590.0" styleClass="block" stylesheets="@css/Level5App.css">
                     <children>
                        <Label layoutX="26.0" layoutY="14.0" prefHeight="184.0" prefWidth="539.0" styleClass="h2_" stylesheets="@css/Level5App.css" text="Существует два типа исключений, проверяемые (checked) и непроверяемые (unchecked) (также называются runtime). Главным отличием является то, что checked исключения проверяются при компиляции, а unchecked исключения проверяются во время запуска.  Как было упомянуто в предыдущем уроке, Thread.sleep() бросает исключение InterruptedException. Это пример checked исключения. Ваш код не скомпилируется, пока вы не обработаете исключение." wrapText="true" />
                     </children>
                  </AnchorPane>
                  <AnchorPane layoutX="36.0" layoutY="539.0" prefHeight="125.0" prefWidth="590.0" styleClass="block" stylesheets="@css/Level5App.css">
                     <children>
                        <Label layoutX="26.0" layoutY="11.0" prefHeight="105.0" prefWidth="539.0" styleClass="h2_" stylesheets="@css/Level5App.css" text="Мы видели примеры unchecked исключений, которые проверяются во время запуска, в предыдущих уроках. Пример (попытка деления на 0):" wrapText="true" />
                     </children>
                  </AnchorPane>
                  <TextArea editable="false" layoutX="36.0" layoutY="676.0" prefHeight="146.0" prefWidth="522.0" styleClass="code" stylesheets="@css/Level5App.css" text="&#10;public class MyClass {&#10;    public static void main(String[ ] args) {&#10;        int value = 7;&#10;        value = value / 0;&#10;    }&#10;}" />
               </children>
            </AnchorPane>
         </content>
      </ScrollPane>
      <ScrollPane fx:id="sp5" layoutX="263.0" prefHeight="736.0" prefWidth="680.0" visible="false">
         <content>
            <AnchorPane minHeight="0.0" minWidth="0.0" prefHeight="1251.0" prefWidth="662.0" style="-fx-background-color: white;">
               <children>
                  <Label layoutX="36.0" layoutY="45.0" prefHeight="30.0" prefWidth="510.0" styleClass="h1_" stylesheets="@css/Level5App.css" text="ArrayList" />
                  <AnchorPane layoutX="36.0" layoutY="103.0" prefHeight="306.0" prefWidth="590.0" styleClass="block" stylesheets="@css/Level5App.css">
                     <children>
                        <Label layoutX="26.0" layoutY="14.0" prefHeight="278.0" prefWidth="539.0" styleClass="h2_" stylesheets="@css/Level5App.css" text="Java API предоставляет специальные классы для хранения и управления группами объектов. Одним из таких классов является ArrayList. Стандартные Java массивы имеют фиксированную длину, что означает, что после их создания они не могут быть расширены, или уменьшены.  С другой стороны, классы ArrayList создаются с первоначальным размером, но если размер превышается, то коллекция автоматически увеличивается.  Когда объекты удаляются, ArrayList может уменьшиться в размере. Обратите внимание, что класс ArrayList находится в пакете java.util, так что необходимо его импортировать до использования. Создадим ArrayList." wrapText="true" />
                     </children>
                  </AnchorPane>
                  <AnchorPane layoutX="36.0" layoutY="2263.0" prefHeight="118.0" prefWidth="590.0" styleClass="block" stylesheets="@css/Level5App.css">
                     <children>
                        <Label layoutX="26.0" layoutY="14.0" prefHeight="91.0" prefWidth="537.0" styleClass="h2_" stylesheets="@css/Level5App.css" text="switch-выражение делает блок switch-case намного короче и не использует оператор break." wrapText="true" />
                     </children>
                  </AnchorPane>
                  <AnchorPane layoutX="36.0" layoutY="534.0" prefHeight="107.0" prefWidth="590.0" styleClass="block" stylesheets="@css/Level5App.css">
                     <children>
                        <Label layoutX="26.0" layoutY="14.0" prefHeight="85.0" prefWidth="537.0" styleClass="h2_" stylesheets="@css/Level5App.css" text="Вы можете опционально определить емкость и тип объектов, которые будет содержать класс ArrayList:" wrapText="true" />
                     </children>
                  </AnchorPane>
                  <TextArea editable="false" layoutX="36.0" layoutY="421.0" prefHeight="102.0" prefWidth="465.0" styleClass="code" stylesheets="@css/Level5App.css" text="&#10;import java.util.ArrayList; &#10;//... &#10;ArrayList colors = new ArrayList();" />
                  <TextArea editable="false" layoutX="36.0" layoutY="653.0" prefHeight="60.0" prefWidth="465.0" styleClass="code" stylesheets="@css/Level5App.css" text="&#10;ArrayList&lt;String&gt; colors = new ArrayList&lt;String&gt;(10);" />
                  <AnchorPane layoutX="36.0" layoutY="724.0" prefHeight="192.0" prefWidth="590.0" styleClass="block" stylesheets="@css/Level5App.css">
                     <children>
                        <Label layoutX="26.0" layoutY="14.0" prefHeight="154.0" prefWidth="539.0" styleClass="h2_" stylesheets="@css/Level5App.css" text="В вышеуказанном коде определяется ArrayList переменных типа String с 10 в качестве его начального размера.Класс ArrayList предоставляет множество полезных методов для управления его объектами.  Метод add() добавляет новые объекты классу ArrayList. И наоборот, метод remove() удаляет объекты из класса ArrayList." wrapText="true" />
                     </children>
                  </AnchorPane>
                  <TextArea editable="false" layoutX="36.0" layoutY="928.0" prefHeight="298.0" prefWidth="519.0" styleClass="code" stylesheets="@css/Level5App.css" text="&#10;import java.util.ArrayList;&#10;&#10;public class MyClass {&#10;    public static void main(String[ ] args) {&#10;        ArrayList&lt;String&gt; colors = new ArrayList&lt;String&gt;();&#10;        colors.add(&quot;Red&quot;);&#10;        colors.add(&quot;Blue&quot;);&#10;        colors.add(&quot;Green&quot;);&#10;        colors.add(&quot;Orange&quot;);&#10;        colors.remove(&quot;Green&quot;);&#10;        &#10;        System.out.println(colors);&#10;    }&#10;}" />
               </children>
            </AnchorPane>
         </content>
      </ScrollPane>
      <ScrollPane fx:id="sp6" layoutX="263.0" prefHeight="731.0" prefWidth="680.0" visible="false">
         <content>
            <AnchorPane minHeight="0.0" minWidth="0.0" prefHeight="1251.0" prefWidth="662.0" style="-fx-background-color: white;">
               <children>
                  <Label layoutX="36.0" layoutY="45.0" prefHeight="30.0" prefWidth="510.0" styleClass="h1_" stylesheets="@css/Level5App.css" text="LinkedList" />
                  <TextArea editable="false" layoutX="36.0" layoutY="222.0" prefHeight="277.0" prefWidth="505.0" styleClass="code" stylesheets="@css/Level5App.css" text="&#10;import java.util.LinkedList;&#10;&#10;public class MyClass {&#10;    public static void main(String[ ] args) {&#10;        LinkedList&lt;String&gt; c = new LinkedList&lt;String&gt;();&#10;        c.add(&quot;Red&quot;);&#10;        c.add(&quot;Blue&quot;);&#10;        c.add(&quot;Green&quot;);&#10;        c.add(&quot;Orange&quot;);&#10;        c.remove(&quot;Green&quot;);&#10;        System.out.println(c);&#10;    }&#10;}" />
                  <AnchorPane layoutX="36.0" layoutY="103.0" prefHeight="103.0" prefWidth="590.0" styleClass="block" stylesheets="@css/Level5App.css">
                     <children>
                        <Label layoutX="26.0" layoutY="14.0" prefHeight="71.0" prefWidth="539.0" styleClass="h2_" stylesheets="@css/Level5App.css" text="LinkedList очень похож по синтаксису на ArrayList.  Вы можете легко изменить ArrayList на LinkedList, изменив тип объекта." wrapText="true" />
                     </children>
                  </AnchorPane>
                  <AnchorPane layoutX="36.0" layoutY="589.0" prefHeight="286.0" prefWidth="590.0" styleClass="block" stylesheets="@css/Level5App.css">
                     <children>
                        <Label layoutX="26.0" layoutY="14.0" prefHeight="261.0" prefWidth="539.0" styleClass="h2_" stylesheets="@css/Level5App.css" text="Наиболее заметная разница между LinkedList и ArrayList находится в их способах хранения объектов.  ArrayList лучше для хранения и получения доступа к информации, так как он очень похож на обычный массив.  LinkedList лучше для манипулирования информацией, типа создания множества вставок и удалений.  В дополнении к хранению объекта, LinkedList хранит адрес памяти (или ссылку) элемента, который за ним следует. Он называется LinkedList (связанный список), потому что каждый элемент содержит ссылку на соседний элемент.Вы можете использовать улучшенный цикл for для итерации по его элементам." wrapText="true" />
                     </children>
                  </AnchorPane>
                  <Label layoutX="36.0" layoutY="530.0" prefHeight="30.0" prefWidth="510.0" styleClass="h1_" stylesheets="@css/Level5App.css" text="LinkedList" />
                  <TextArea editable="false" layoutX="36.0" layoutY="893.0" prefHeight="327.0" prefWidth="505.0" styleClass="code" stylesheets="@css/Level5App.css" text="&#10;import java.util.LinkedList;&#10;&#10;public class MyClass {&#10;    public static void main(String[ ] args) {&#10;        LinkedList&lt;String&gt; c = new LinkedList&lt;String&gt;();&#10;        c.add(&quot;Red&quot;);&#10;        c.add(&quot;Blue&quot;);&#10;        c.add(&quot;Green&quot;);&#10;        c.add(&quot;Orange&quot;);&#10;        c.remove(&quot;Green&quot;);&#10;        &#10;        for(String s: c) {&#10;            System.out.println(s);&#10;        }&#10;    }&#10;}" />
               </children>
            </AnchorPane>
         </content>
      </ScrollPane>
      <ScrollPane fx:id="sp7" layoutX="263.0" prefHeight="737.0" prefWidth="680.0" visible="false">
         <content>
            <AnchorPane minHeight="0.0" minWidth="0.0" prefHeight="841.0" prefWidth="662.0" style="-fx-background-color: white;">
               <children>
                  <Label layoutX="36.0" layoutY="45.0" prefHeight="30.0" prefWidth="510.0" styleClass="h1_" stylesheets="@css/Level5App.css" text="HashMap" />
                  <AnchorPane layoutX="36.0" layoutY="103.0" prefHeight="198.0" prefWidth="590.0" styleClass="block" stylesheets="@css/Level5App.css">
                     <children>
                        <Label layoutX="26.0" layoutY="14.0" prefHeight="174.0" prefWidth="539.0" styleClass="h2_" stylesheets="@css/Level5App.css" text="Массивы и Списки хранят элементы в виде упорядоченных коллекций, каждый элемент с заданным целочисленным индексом.  HashMap используется для хранения коллекций информации в виде пар ключей и значений. Один объект используется в качестве ключа (индекса) к другому объекту (значению).   Методы put, remove, и get используются для добавления, удаления и получения доступа к значениям в HashMap." wrapText="true" />
                     </children>
                  </AnchorPane>
                  <TextArea editable="false" layoutX="36.0" layoutY="311.0" prefHeight="254.0" prefWidth="433.0" styleClass="code" stylesheets="@css/Level5App.css" text="&#10;import java.util.HashMap;&#10;&#10;public class MyClass {&#10;    public static void main(String[ ] args) {&#10;        HashMap&lt;String, Integer&gt; points = &#10;                new HashMap&lt;String, Integer&gt;();&#10;        points.put(&quot;Amy&quot;, 154);&#10;        points.put(&quot;Dave&quot;, 42);&#10;        points.put(&quot;Rob&quot;, 733);&#10;        System.out.println(points.get(&quot;Dave&quot;)); &#10;    }&#10;}" />
                  <AnchorPane layoutX="36.0" layoutY="580.0" prefHeight="236.0" prefWidth="590.0" styleClass="block" stylesheets="@css/Level5App.css">
                     <children>
                        <Label layoutX="26.0" layoutY="14.0" prefHeight="210.0" prefWidth="539.0" styleClass="h2_" stylesheets="@css/Level5App.css" text="Мы создали HashMap с переменными типа String в качестве ключей и переменными типа Integer в качестве значений.HashMap не может содержать дубликаты ключей. Добавление нового пункта с существующим ключом переписывает старый элемент.  Класс HashMap предоставляет методы containsKey и containsValue которые определяют наличие соответствующего ключа или значения.  Если вы попробуете получить значение, которого у вас нет, то вернется значение null." wrapText="true" />
                     </children>
                  </AnchorPane>
               </children>
            </AnchorPane>
         </content>
      </ScrollPane>
      <ScrollPane fx:id="sp8" layoutX="263.0" prefHeight="747.0" prefWidth="680.0" visible="false">
         <content>
            <AnchorPane minHeight="0.0" minWidth="0.0" prefHeight="860.0" prefWidth="662.0" style="-fx-background-color: white;">
               <children>
                  <Label layoutX="36.0" layoutY="45.0" prefHeight="30.0" prefWidth="510.0" styleClass="h1_" stylesheets="@css/Level5App.css" text="Sets" />
                  <AnchorPane layoutX="36.0" layoutY="103.0" prefHeight="121.0" prefWidth="590.0" styleClass="block" stylesheets="@css/Level5App.css">
                     <children>
                        <Label layoutX="26.0" layoutY="14.0" prefHeight="103.0" prefWidth="539.0" styleClass="h2_" stylesheets="@css/Level5App.css" text="Set это коллекция, которая не может содержать дубликаты элементов. Она моделирует математический набор абстракций.  Одной из ее реализаций является класс HashSet." wrapText="true" />
                     </children>
                  </AnchorPane>
                  <TextArea editable="false" layoutX="36.0" layoutY="236.0" prefHeight="233.0" prefWidth="468.0" styleClass="code" stylesheets="@css/Level5App.css" text="&#10;import java.util.HashSet;&#10;&#10;public class MyClass {&#10;    public static void main(String[ ] args) {&#10;        HashSet&lt;String&gt; set = new HashSet&lt;String&gt;();&#10;        set.add(&quot;A&quot;);&#10;        set.add(&quot;B&quot;);&#10;        set.add(&quot;C&quot;);&#10;        System.out.println(set);&#10;    }&#10;}" />
                  <AnchorPane layoutX="36.0" layoutY="559.0" prefHeight="269.0" prefWidth="590.0" styleClass="block" stylesheets="@css/Level5App.css">
                     <children>
                        <Label layoutX="26.0" layoutY="14.0" prefHeight="245.0" prefWidth="539.0" styleClass="h2_" stylesheets="@css/Level5App.css" text="Класс HashSet не сохраняет автоматически порядок элементов, в котором они были добавлены. Чтобы упорядочить элементы, используйте LinkedHashSet, который сохраняет связанный список элементов в том порядке, в котором они были добавлены.  Что такое хэширование? Хэш-таблица хранит информацию с помощью механизма, называемого хэшированием, в котором ключевое информационное содержимое используется для определения уникального значения, называемого хэш-кодом.  Так что, в принципе, каждый элемент в HashSet связан с его уникальным хэш-кодом." wrapText="true" />
                     </children>
                  </AnchorPane>
                  <Label layoutX="36.0" layoutY="498.0" prefHeight="30.0" prefWidth="510.0" styleClass="h1_" stylesheets="@css/Level5App.css" text="LinkedHashSet" />
               </children>
            </AnchorPane>
         </content>
      </ScrollPane>
      <ScrollPane fx:id="sp9" layoutX="263.0" layoutY="-2.0" prefHeight="741.0" prefWidth="680.0" visible="false">
         <content>
            <AnchorPane minHeight="0.0" minWidth="0.0" prefHeight="1109.0" prefWidth="662.0" style="-fx-background-color: white;">
               <children>
                  <Label layoutX="36.0" layoutY="45.0" prefHeight="30.0" prefWidth="348.0" styleClass="h1_" stylesheets="@css/Level5App.css" text="Сортировка Списка" />
                  <TextArea editable="false" layoutX="36.0" layoutY="307.0" prefHeight="322.0" prefWidth="548.0" styleClass="code" stylesheets="@css/Level5App.css" text="&#10;import java.util.ArrayList;&#10;import java.util.Collections;&#10;&#10;public class MyClass {&#10;    public static void main(String[ ] args) {&#10;        ArrayList&lt;String&gt; animals = new ArrayList&lt;String&gt;();&#10;        animals.add(&quot;tiger&quot;);&#10;        animals.add(&quot;cat&quot;);&#10;        animals.add(&quot;snake&quot;);&#10;        animals.add(&quot;dog&quot;);&#10;        &#10;        Collections.sort(animals);&#10;       &#10;        System.out.println(animals);&#10;    }&#10;}" />
                  <AnchorPane layoutX="36.0" layoutY="103.0" prefHeight="193.0" prefWidth="590.0" styleClass="block" stylesheets="@css/Level5App.css">
                     <children>
                        <Label layoutX="26.0" layoutY="14.0" prefHeight="165.0" prefWidth="539.0" styleClass="h2_" stylesheets="@css/Level5App.css" text="Для управления информацией в различных типах коллекций, Java API предоставляет класс Collections, который включен в пакет java.util.   Наиболее популярным методом класса Collections является метод sort(), который сортирует элементы вашего типа коллекции. Методы в классе Collections являются статическими, так что вам не нужны объекты класса Collections, чтобы их вызвать." wrapText="true" />
                     </children>
                  </AnchorPane>
                  <AnchorPane layoutX="36.0" layoutY="645.0" prefHeight="82.0" prefWidth="590.0" styleClass="block" stylesheets="@css/Level5App.css">
                     <children>
                        <Label layoutX="26.0" layoutY="14.0" prefHeight="49.0" prefWidth="539.0" styleClass="h2_" stylesheets="@css/Level5App.css" text="Вы можете вызвать методы sort() для различных типов списков, например для Integer." wrapText="true" />
                     </children>
                  </AnchorPane>
                  <TextArea editable="false" layoutX="36.0" layoutY="743.0" prefHeight="337.0" prefWidth="548.0" styleClass="code" stylesheets="@css/Level5App.css" text="&#10;import java.util.ArrayList;&#10;import java.util.Collections;&#10;&#10;public class MyClass {&#10;    public static void main(String[ ] args) {&#10;        ArrayList&lt;Integer&gt; nums = new ArrayList&lt;Integer&gt;();&#10;        nums.add(3);&#10;        nums.add(36);&#10;        nums.add(73);&#10;        nums.add(40);&#10;        nums.add(1);&#10;        &#10;        Collections.sort(nums);&#10;        System.out.println(nums);&#10;    }&#10;}" />
               </children>
            </AnchorPane>
         </content>
      </ScrollPane>
      <ScrollPane fx:id="sp10" layoutX="261.0" prefHeight="738.0" prefWidth="680.0" visible="false">
         <content>
            <AnchorPane minHeight="0.0" minWidth="0.0" prefHeight="1314.0" prefWidth="662.0" style="-fx-background-color: white;">
               <children>
                  <Label layoutX="36.0" layoutY="45.0" prefHeight="30.0" prefWidth="348.0" styleClass="h1_" stylesheets="@css/Level5App.css" text="Итераторы" />
                  <AnchorPane layoutX="36.0" layoutY="122.0" prefHeight="329.0" prefWidth="590.0" styleClass="block" stylesheets="@css/Level5App.css">
                     <children>
                        <Label layoutX="26.0" layoutY="14.0" prefHeight="302.0" prefWidth="539.0" styleClass="h2_" stylesheets="@css/Level5App.css" text="Iterator это объект, который позволяет циклично проходить через коллекцию, получать или удалять элементы.   До того, как вы получите доступ к коллекции с помощью итератора, вы должны получить сам итератор. Каждый класс коллекции предоставляет метод iterator(), который возвращает итератор к началу коллекции. Используя этот объект итератора, вы можете получить доступ к каждому элементу коллекции, по одному элементу за раз.  Класс Iterator предоставляет следующие методы: hasNext(): Возвращает “Верно”, если есть еще по крайней мере один элемент; иначе, он вернет “Ложь”. next(): Возвращает следующий объект и перемещает итератор. remove(): Удаляет последний объект, который был возвращен из коллекции методом next.  Класс Iterator должен быть импортирован из пакета java.util." wrapText="true" />
                     </children>
                  </AnchorPane>
                  <TextArea editable="false" layoutX="36.0" layoutY="465.0" prefHeight="347.0" prefWidth="573.0" styleClass="code" stylesheets="@css/Level5App.css" text="&#10;import java.util.Iterator;&#10;import java.util.LinkedList;&#10;&#10;public class MyClass {&#10;    public static void main(String[ ] args) {&#10;        LinkedList&lt;String&gt; animals = new LinkedList&lt;String&gt;();&#10;        animals.add(&quot;fox&quot;);&#10;        animals.add(&quot;cat&quot;);&#10;        animals.add(&quot;dog&quot;);&#10;        animals.add(&quot;rabbit&quot;);&#10;        &#10;        Iterator&lt;String&gt; it = animals.iterator();&#10;        String value = it.next();&#10;        System.out.println(value);&#10;    }&#10;}" />
                  <AnchorPane layoutX="36.0" layoutY="824.0" prefHeight="100.0" prefWidth="590.0" styleClass="block" stylesheets="@css/Level5App.css">
                     <children>
                        <Label layoutX="26.0" layoutY="9.0" prefHeight="81.0" prefWidth="539.0" styleClass="h2_" stylesheets="@css/Level5App.css" text="Обычно, итераторы используются в циклах. При каждой итерации цикла вы можете получить доступ к соответствующему элементу списка." wrapText="true" />
                     </children>
                  </AnchorPane>
                  <TextArea editable="false" layoutX="36.0" layoutY="935.0" prefHeight="359.0" prefWidth="573.0" styleClass="code" stylesheets="@css/Level5App.css" text="&#10;import java.util.Iterator;&#10;import java.util.LinkedList;&#10;&#10;public class MyClass {&#10;    public static void main(String[ ] args) {&#10;        LinkedList&lt;String&gt; animals = new LinkedList&lt;String&gt;();&#10;        animals.add(&quot;fox&quot;);&#10;        animals.add(&quot;cat&quot;);&#10;        animals.add(&quot;dog&quot;);&#10;        animals.add(&quot;rabbit&quot;);&#10;        &#10;        Iterator&lt;String&gt; it = animals.iterator();&#10;        while(it.hasNext()) {&#10;            String value = it.next();&#10;            System.out.println(value);   &#10;        }&#10;    }&#10;}" />
               </children>
            </AnchorPane>
         </content>
      </ScrollPane>
      <ScrollPane fx:id="sp11" layoutX="262.0" prefHeight="738.0" prefWidth="680.0" visible="false">
         <content>
            <AnchorPane minHeight="0.0" minWidth="0.0" prefHeight="843.0" prefWidth="662.0" style="-fx-background-color: white;">
               <children>
                  <Label layoutX="36.0" layoutY="45.0" prefHeight="30.0" prefWidth="348.0" styleClass="h1_" stylesheets="@css/Level5App.css" text="Работа с Файлами" />
                  <AnchorPane layoutX="36.0" layoutY="122.0" prefHeight="114.0" prefWidth="590.0" styleClass="block" stylesheets="@css/Level5App.css">
                     <children>
                        <Label layoutX="26.0" layoutY="14.0" prefHeight="83.0" prefWidth="539.0" styleClass="h2_" stylesheets="@css/Level5App.css" text="Пакет java.io включает в себя класс File, который позволяет вам работать с файлами.  Чтобы начать, создайте объект File и укажите путь к файлу в конструкторе." wrapText="true" />
                     </children>
                  </AnchorPane>
                  <TextArea editable="false" layoutX="36.0" layoutY="249.0" prefHeight="100.0" prefWidth="573.0" styleClass="code" stylesheets="@css/Level5App.css" text="&#10;import java.io.File; &#10;... &#10;File file = new File(&quot;C:\\data\\input-file.txt&quot;);" />
                  <AnchorPane layoutX="36.0" layoutY="361.0" prefHeight="81.0" prefWidth="590.0" styleClass="block" stylesheets="@css/Level5App.css">
                     <children>
                        <Label layoutX="26.0" layoutY="14.0" prefHeight="56.0" prefWidth="539.0" styleClass="h2_" stylesheets="@css/Level5App.css" text="С помощью метода exists(), вы можете определить, существует ли файл." wrapText="true" />
                     </children>
                  </AnchorPane>
                  <TextArea editable="false" layoutX="36.0" layoutY="455.0" prefHeight="268.0" prefWidth="573.0" styleClass="code" stylesheets="@css/Level5App.css" text="&#10;import java.io.File; &#10; &#10;public class MyClass { &#10;  public static void main(String[ ] args) { &#10;    File x = new File(&quot;C:\\sololearn\\test.txt&quot;); &#10;    if(x.exists()) { &#10;     System.out.println(x.getName() +  &quot;exists!&quot;); &#10;    } &#10;    else {  &#10;     System.out.println(&quot;The file does not exist&quot;); &#10;    } &#10;  } &#10;}" />
                  <AnchorPane layoutX="36.0" layoutY="738.0" prefHeight="81.0" prefWidth="590.0" styleClass="block" stylesheets="@css/Level5App.css">
                     <children>
                        <Label layoutX="26.0" layoutY="14.0" prefHeight="56.0" prefWidth="539.0" styleClass="h2_" stylesheets="@css/Level5App.css" text="Вышеуказанный код выводит сообщение о том, существует, или нет, файл, по указанному вами пути." wrapText="true" />
                     </children>
                  </AnchorPane>
               </children>
            </AnchorPane>
         </content>
      </ScrollPane>
      <ScrollPane fx:id="sp12" layoutX="263.0" prefHeight="733.0" prefWidth="680.0" visible="false">
         <content>
            <AnchorPane minHeight="0.0" minWidth="0.0" prefHeight="1061.0" prefWidth="662.0" style="-fx-background-color: white;">
               <children>
                  <Label layoutX="36.0" layoutY="45.0" prefHeight="30.0" prefWidth="510.0" styleClass="h1_" stylesheets="@css/Level5App.css" text="Чтение Файла" />
                  <TextArea editable="false" layoutX="36.0" layoutY="336.0" prefHeight="174.0" prefWidth="495.0" styleClass="code" stylesheets="@css/Level5App.css" text="&#10;try { &#10;  File x = new File(&quot;C:\\sololearn\\test.txt&quot;); &#10;  Scanner sc = new Scanner(x);       &#10;} &#10; catch (FileNotFoundException e) { &#10; &#10;}" />
                  <AnchorPane layoutX="36.0" layoutY="103.0" prefHeight="221.0" prefWidth="590.0" styleClass="block" stylesheets="@css/Level5App.css">
                     <children>
                        <Label layoutX="26.0" layoutY="14.0" prefHeight="187.0" prefWidth="539.0" styleClass="h2_" stylesheets="@css/Level5App.css" text="Файлы полезны для хранения и получения информации, и существует множество способов чтения файлов.  Одним из простейших способов является использование класса Scanner из пакета java.util.  Конструктор класса Scanner может принимать объект File в качестве ввода.  Для чтения содержимого текстового файла, лежащего в &quot;C:\\sololearn\\test.txt&quot;, нам необходимо создать объект File с соответствующим путем и передать его объекту Scanner." wrapText="true" />
                     </children>
                  </AnchorPane>
                  <TextArea editable="false" layoutX="36.0" layoutY="653.0" prefHeight="218.0" prefWidth="465.0" styleClass="code" stylesheets="@css/Level5App.css" text="&#10;try { &#10;  File x = new File(&quot;C:\\sololearn\\test.txt&quot;); &#10;  Scanner sc = new Scanner(x); &#10;  while(sc.hasNext()) { &#10;    System.out.println(sc.next()); &#10;  } &#10;  sc.close(); &#10;} catch (FileNotFoundException e) { &#10;  System.out.println(&quot;Error&quot;); &#10;}" />
                  <Label layoutX="36.0" layoutY="1737.0" prefHeight="30.0" prefWidth="510.0" styleClass="h1_" stylesheets="@css/Level5App.css" text="Switch-выражение" />
                  <AnchorPane layoutX="36.0" layoutY="1802.0" prefHeight="135.0" prefWidth="590.0" styleClass="block" stylesheets="@css/Level5App.css">
                     <children>
                        <Label layoutX="26.0" layoutY="14.0" prefHeight="105.0" prefWidth="537.0" styleClass="h2_" stylesheets="@css/Level5App.css" text="Switch-выражение допускает несколько значений, разделенных запятыми, для каждого случая и возвращает значение для всего блока switch-case." wrapText="true" />
                     </children>
                  </AnchorPane>
                  <TextArea editable="false" layoutX="36.0" layoutY="1953.0" prefHeight="292.0" prefWidth="465.0" styleClass="code" stylesheets="@css/Level5App.css" text="&#10;public class Program&#10;{&#10;    public static void main(String[] args) {&#10;&#10;        int day = 2;&#10;        String dayType  = switch(day) {&#10;            case 1, 2, 3, 4, 5 -&gt; &quot;Working day&quot;;&#10;            case 6, 7 -&gt; &quot;Weekend&quot;;&#10;            default -&gt; &quot;Invalid day&quot;;&#10;            };&#10;        System.out.println(dayType);&#10;    }&#10;}" />
                  <AnchorPane layoutX="36.0" layoutY="2263.0" prefHeight="118.0" prefWidth="590.0" styleClass="block" stylesheets="@css/Level5App.css">
                     <children>
                        <Label layoutX="26.0" layoutY="14.0" prefHeight="91.0" prefWidth="537.0" styleClass="h2_" stylesheets="@css/Level5App.css" text="switch-выражение делает блок switch-case намного короче и не использует оператор break." wrapText="true" />
                     </children>
                  </AnchorPane>
                  <AnchorPane layoutX="36.0" layoutY="522.0" prefHeight="117.0" prefWidth="590.0" styleClass="block" stylesheets="@css/Level5App.css">
                     <children>
                        <Label layoutX="26.0" layoutY="14.0" prefHeight="91.0" prefWidth="539.0" styleClass="h2_" stylesheets="@css/Level5App.css" text="Класс Scanner наследуется от класса Iterator, так что он ведет себя похожим образом.  Мы можем использовать метод next() объекта Scanner для чтения содержимого файла" wrapText="true" />
                     </children>
                  </AnchorPane>
                  <AnchorPane layoutX="36.0" layoutY="885.0" prefHeight="135.0" prefWidth="590.0" styleClass="block" stylesheets="@css/Level5App.css">
                     <children>
                        <Label layoutX="26.0" layoutY="14.0" prefHeight="105.0" prefWidth="537.0" styleClass="h2_" stylesheets="@css/Level5App.css" text="Содержимое файла будет выводится слово за словом, потому что метод next() возвращает каждое слово отдельно." wrapText="true" />
                     </children>
                  </AnchorPane>
               </children>
            </AnchorPane>
         </content>
      </ScrollPane>
      <ScrollPane fx:id="sp13" layoutX="263.0" prefHeight="737.0" prefWidth="680.0" visible="false">
         <content>
            <AnchorPane minHeight="0.0" minWidth="0.0" prefHeight="1311.0" prefWidth="662.0" style="-fx-background-color: white;">
               <children>
                  <Label layoutX="36.0" layoutY="45.0" prefHeight="30.0" prefWidth="510.0" styleClass="h1_" stylesheets="@css/Level5App.css" text="Создание Файлов" />
                  <AnchorPane layoutX="36.0" layoutY="103.0" prefHeight="90.0" prefWidth="590.0" styleClass="block" stylesheets="@css/Level5App.css">
                     <children>
                        <Label layoutX="26.0" layoutY="14.0" prefHeight="63.0" prefWidth="539.0" styleClass="h2_" stylesheets="@css/Level5App.css" text="Formatter, другой полезный класс в пакете java.util, используется для создания содержимого и записи его в файлы." wrapText="true" />
                     </children>
                  </AnchorPane>
                  <TextArea editable="false" layoutX="36.0" layoutY="205.0" prefHeight="240.0" prefWidth="542.0" styleClass="code" stylesheets="@css/Level5App.css" text="&#10;import java.util.Formatter; &#10; &#10;public class MyClass { &#10;   public static void main(String[ ] args) { &#10;  try { &#10;    Formatter f = new Formatter(&quot;C:\\sololearn\\test.txt&quot;); &#10;  } catch (Exception e) { &#10;      System.out.println(&quot;Error&quot;); &#10;  } &#10;  } &#10;}" />
                  <AnchorPane layoutX="36.0" layoutY="457.0" prefHeight="141.0" prefWidth="590.0" styleClass="block" stylesheets="@css/Level5App.css">
                     <children>
                        <Label layoutX="26.0" layoutY="14.0" prefHeight="121.0" prefWidth="539.0" styleClass="h2_" stylesheets="@css/Level5App.css" text="Таким образом создается пустой файл по указанному пути. Если файл уже существует, то он будет переписан.После того, как файл был создан, вы можете записать содержимое в него, используя метод format() объекта Formatter." wrapText="true" />
                     </children>
                  </AnchorPane>
                  <TextArea editable="false" layoutX="36.0" layoutY="611.0" prefHeight="458.0" prefWidth="550.0" styleClass="code" stylesheets="@css/Level5App.css" text="&#10;import java.io.File;&#10;import java.util.Scanner;&#10;import java.util.Formatter;&#10;&#10;public class MyClass {&#10;    public static void main(String[ ] args) {&#10;        try {&#10;            Formatter f = new Formatter(&quot;test.txt&quot;);&#10;            f.format(&quot;%s %s %s&quot;, &quot;1&quot;,&quot;John&quot;, &quot;Smith \r\n&quot;);&#10;            f.format(&quot;%s %s %s&quot;, &quot;2&quot;,&quot;Amy&quot;, &quot;Brown&quot;);&#10;            f.close();&#10;&#10;            File x = new File(&quot;test.txt&quot;);&#10;            Scanner sc = new Scanner(x);&#10;            while(sc.hasNext()) {&#10;                System.out.println(sc.next());&#10;            }&#10;            sc.close();&#10;        } catch (Exception e) {&#10;        System.out.println(&quot;Error&quot;);&#10;        }&#10;    }&#10;}" />
                  <AnchorPane layoutX="36.0" layoutY="1082.0" prefHeight="205.0" prefWidth="590.0" styleClass="block" stylesheets="@css/Level5App.css">
                     <children>
                        <Label layoutX="26.0" layoutY="14.0" prefHeight="176.0" prefWidth="539.0" styleClass="h2_" stylesheets="@css/Level5App.css" text="Метод format() форматирует его параметры согласно с первым параметром.   %s означает строку и заменяется первым параметром после метода format. Второй %s заменяется следующим параметром и так далее. Значит, формат %s %s %s означает три строки, разделенные пробелами.  Обратите внимание: \r\n это символ новой строки в Windows.  Вышеуказанный код создает файл со следующим содержимым:1 John Smith  2 Amy Brown" wrapText="true" />
                     </children>
                  </AnchorPane>
               </children>
            </AnchorPane>
         </content>
      </ScrollPane>
      <ScrollPane fx:id="sp14" layoutX="263.0" prefHeight="738.0" prefWidth="680.0" visible="false">
         <content>
            <AnchorPane minHeight="0.0" minWidth="0.0" prefHeight="2426.0" prefWidth="662.0" style="-fx-background-color: white;">
               <children>
                  <Label layoutX="36.0" layoutY="45.0" prefHeight="30.0" prefWidth="510.0" styleClass="h1_" stylesheets="@css/Level5App.css" text="Тест" />
                  <AnchorPane layoutX="36.0" layoutY="103.0" prefHeight="142.0" prefWidth="590.0" styleClass="block" stylesheets="@css/Level5App.css">
                     <children>
                        <Label layoutX="26.0" layoutY="14.0" prefHeight="121.0" prefWidth="539.0" styleClass="h2_" stylesheets="@css/Level5App.css" text="Для получения следующего уровня, необходимо пройти тест, состоящий из разных вопросов и способов ответа на них. " wrapText="true" />
                     </children>
                  </AnchorPane>
                  <AnchorPane layoutX="36.0" layoutY="260.0" prefHeight="45.0" prefWidth="509.0" style="-fx-background-color: #fed15a;" styleClass="subblock" stylesheets="@css/Level5App.css">
                     <children>
                        <Label layoutX="18.0" layoutY="5.0" prefHeight="40.0" prefWidth="504.0" styleClass="h3_" stylesheets="@css/Level5App.css" text="Это последний тест, пройдя его, вы проходите курс по Java" wrapText="true" />
                     </children>
                  </AnchorPane>
                  <AnchorPane layoutX="35.0" layoutY="320.0" prefHeight="244.0" prefWidth="590.0" styleClass="block" stylesheets="@css/Level5App.css">
                     <children>
                        <Label layoutX="26.0" layoutY="14.0" prefHeight="61.0" prefWidth="551.0" styleClass="h2_" stylesheets="@css/Level5App.css" text="Заполните пустые места, чтобы объявить функцию, которая принимает два целых числа в качестве аргументов и выведите их деление. Обработайте возможные исключения:" wrapText="true" />
                        <Label layoutX="26.0" layoutY="90.0" styleClass="code_text" stylesheets="@css/Level5App.css" text="void myFunc(int a," />
                        <TextField fx:id="tf1" alignment="TOP_LEFT" layoutX="177.0" layoutY="85.0" prefHeight="28.0" prefWidth="49.0" promptText="___" styleClass="code_text" />
                        <Label layoutX="219.0" layoutY="91.0" styleClass="code_text" stylesheets="@css/Level5App.css" text="b){" />
                        <TextField fx:id="tf2" alignment="TOP_LEFT" layoutX="18.0" layoutY="109.0" prefHeight="28.0" prefWidth="49.0" promptText="___" styleClass="code_text" />
                        <Label layoutX="62.0" layoutY="115.0" styleClass="code_text" stylesheets="@css/Level5App.css" text="{" />
                        <Label layoutX="27.0" layoutY="137.0" styleClass="code_text" stylesheets="@css/Level5App.css" text="    System.out.println(a" />
                        <TextField fx:id="tf3" alignment="TOP_LEFT" layoutX="232.0" layoutY="131.0" prefHeight="28.0" prefWidth="30.0" promptText="___" styleClass="code_text" />
                        <Label layoutX="263.0" layoutY="137.0" styleClass="code_text" stylesheets="@css/Level5App.css" text="b);" />
                        <Label layoutX="25.0" layoutY="159.0" styleClass="code_text" stylesheets="@css/Level5App.css" text="}catch(Exception e){" />
                        <Label layoutX="28.0" layoutY="181.0" styleClass="code_text" stylesheets="@css/Level5App.css" text="    System.out.println(&quot;Error&quot;);" />
                        <Label layoutX="27.0" layoutY="196.0" styleClass="code_text" stylesheets="@css/Level5App.css" text="}" />
                     </children>
                  </AnchorPane>
                  <AnchorPane layoutX="36.0" layoutY="1366.0" prefHeight="271.0" prefWidth="590.0" styleClass="block" stylesheets="@css/Level5App.css">
                     <children>
                        <Label layoutX="26.0" layoutY="14.0" prefHeight="47.0" prefWidth="539.0" styleClass="h2_" stylesheets="@css/Level5App.css" text="Какие две опции позволяют вам создать новые потоки?" wrapText="true" />
                        <RadioButton fx:id="rb1" layoutX="33.0" layoutY="64.0" mnemonicParsing="false" prefHeight="37.0" prefWidth="410.0" styleClass="code_text" text="Наименование вашего класса ”Thread&quot;" wrapText="true" />
                        <RadioButton fx:id="rb2" layoutX="33.0" layoutY="102.0" mnemonicParsing="false" prefHeight="37.0" prefWidth="410.0" styleClass="code_text" text="Обработка исключений" wrapText="true" />
                        <RadioButton fx:id="rb3" layoutX="33.0" layoutY="142.0" mnemonicParsing="false" prefHeight="37.0" prefWidth="410.0" styleClass="code_text" text="Реализация Runnable" wrapText="true" />
                        <RadioButton fx:id="rb4" layoutX="33.0" layoutY="183.0" mnemonicParsing="false" prefHeight="37.0" prefWidth="410.0" styleClass="code_text" text="Расширение класса Thread" wrapText="true" />
                     </children>
                  </AnchorPane>
                  <Button layoutX="36.0" layoutY="2364.0" mnemonicParsing="false" onAction="#checkLevel5Test" styleClass="check_button" stylesheets="@css/Level5App.css" text="Проверить" />
                  <AnchorPane layoutX="36.0" layoutY="579.0" prefHeight="248.0" prefWidth="590.0" styleClass="block" stylesheets="@css/Level5App.css">
                     <children>
                        <Label layoutX="18.0" layoutY="11.0" prefHeight="61.0" prefWidth="569.0" styleClass="h2_" stylesheets="@css/Level5App.css" text="Заполните пустые места, чтобы определить функцию &quot;myFunc&quot;,которая бросает исключение, еслипараметр меньше 0." wrapText="true" />
                        <Label layoutX="26.0" layoutY="90.0" styleClass="code_text" stylesheets="@css/Level5App.css" text="void myFunc(int arg)" />
                        <TextField fx:id="tf4" alignment="TOP_LEFT" layoutX="18.0" layoutY="109.0" prefHeight="28.0" prefWidth="69.0" promptText="______" styleClass="code_text" />
                        <Label layoutX="88.0" layoutY="115.0" prefHeight="18.0" prefWidth="220.0" styleClass="code_text" stylesheets="@css/Level5App.css" text="IllegalArgumentException" />
                        <Label layoutX="27.0" layoutY="137.0" styleClass="code_text" stylesheets="@css/Level5App.css" text="}" />
                        <Label layoutX="28.0" layoutY="181.0" styleClass="code_text" stylesheets="@css/Level5App.css" text="throw " />
                        <Label layoutX="27.0" layoutY="203.0" styleClass="code_text" stylesheets="@css/Level5App.css" text="}" />
                        <TextField fx:id="tf5" alignment="TOP_LEFT" layoutX="17.0" layoutY="157.0" prefHeight="28.0" prefWidth="35.0" promptText="__" styleClass="code_text" />
                        <Label layoutX="46.0" layoutY="162.0" styleClass="code_text" stylesheets="@css/Level5App.css" text="(arg &lt; " />
                        <TextField fx:id="tf6" alignment="TOP_LEFT" layoutX="97.0" layoutY="157.0" prefHeight="28.0" prefWidth="37.0" promptText="__" styleClass="code_text" />
                        <Label layoutX="132.0" layoutY="162.0" styleClass="code_text" stylesheets="@css/Level5App.css" text=")" />
                        <TextField fx:id="tf7" alignment="TOP_LEFT" layoutX="73.0" layoutY="176.0" prefHeight="28.0" prefWidth="44.0" promptText="__" styleClass="code_text" />
                        <Label layoutX="115.0" layoutY="182.0" prefHeight="18.0" prefWidth="239.0" styleClass="code_text" stylesheets="@css/Level5App.css" text="IllegalArgumentException();" />
                     </children>
                  </AnchorPane>
                  <AnchorPane layoutX="37.0" layoutY="861.0" prefHeight="492.0" prefWidth="590.0" styleClass="block" stylesheets="@css/Level5App.css">
                     <children>
                        <Label layoutX="18.0" layoutY="11.0" prefHeight="61.0" prefWidth="569.0" styleClass="h2_" stylesheets="@css/Level5App.css" text="Сколько строк будет в выводе следующего кода?" wrapText="true" />
                        <TextField fx:id="tf8" alignment="TOP_LEFT" layoutX="283.0" layoutY="439.0" prefHeight="28.0" prefWidth="30.0" promptText="______" styleClass="code_text" />
                        <TextArea editable="false" layoutX="18.0" layoutY="68.0" prefHeight="323.0" prefWidth="456.0" styleClass="code" stylesheets="@css/Level5App.css" text="&#10;class B implements Runnable {&#10;  public void run() {&#10;    System.out.println(&quot;B&quot;);&#10;  }&#10;}&#10;class A extends Thread {&#10;  public void run() {&#10;    System.out.println(&quot;A&quot;);&#10;    Thread t = new Thread(new B());&#10;    t.start();&#10;  }&#10;public static void main(String[] args) {&#10;  A object = new A();&#10;  object.start();&#10;  }&#10;}" />
                        <Label layoutX="223.0" layoutY="440.0" prefHeight="23.0" prefWidth="62.0" styleClass="h2_" stylesheets="@css/Level5App.css" text="Ответ:" wrapText="true" />
                     </children>
                  </AnchorPane>
                  <AnchorPane layoutX="36.0" layoutY="1656.0" prefHeight="402.0" prefWidth="590.0" styleClass="block" stylesheets="@css/Level5App.css">
                     <children>
                        <Label layoutX="18.0" layoutY="11.0" prefHeight="61.0" prefWidth="569.0" styleClass="h2_" stylesheets="@css/Level5App.css" text="Что выведет следующий код?" wrapText="true" />
                        <TextField fx:id="tf9" alignment="TOP_LEFT" layoutX="282.0" layoutY="346.0" prefHeight="28.0" prefWidth="35.0" promptText="______" styleClass="code_text" />
                        <TextArea editable="false" layoutX="18.0" layoutY="68.0" prefHeight="238.0" prefWidth="456.0" styleClass="code" stylesheets="@css/Level5App.css" text="&#10;ArrayList&lt;Integer&gt; list = new&#10;ArrayList&lt;Integer&gt;();&#10;for (int i = 0; i &lt; 6; i++) {&#10;  list.add(i);&#10;}&#10;int x = 0;&#10;Iterator&lt;Integer&gt; it = list.iterator();&#10;while (it.hasNext()) {&#10;  x += it.next();&#10;}&#10;System.out.println(x);" />
                        <Label layoutX="227.0" layoutY="347.0" prefHeight="23.0" prefWidth="62.0" styleClass="h2_" stylesheets="@css/Level5App.css" text="Ответ:" wrapText="true" />
                     </children>
                  </AnchorPane>
                  <AnchorPane layoutX="36.0" layoutY="2072.0" prefHeight="269.0" prefWidth="590.0" styleClass="block" stylesheets="@css/Level5App.css">
                     <children>
                        <Label layoutX="18.0" layoutY="11.0" prefHeight="61.0" prefWidth="569.0" styleClass="h2_" stylesheets="@css/Level5App.css" text="Что выведет следующий код?" wrapText="true" />
                        <TextField fx:id="tf10" alignment="TOP_LEFT" layoutX="277.0" layoutY="222.0" prefHeight="28.0" prefWidth="35.0" promptText="______" styleClass="code_text" />
                        <TextArea editable="false" layoutX="18.0" layoutY="68.0" prefHeight="110.0" prefWidth="456.0" styleClass="code" stylesheets="@css/Level5App.css" text="&#10;int f = 1, i = 2;&#10;while (++i &lt; 5)&#10;  f *= i;&#10;System.out.println(f);" />
                        <Label layoutX="214.0" layoutY="223.0" prefHeight="23.0" prefWidth="62.0" styleClass="h2_" stylesheets="@css/Level5App.css" text="Ответ:" wrapText="true" />
                     </children>
                  </AnchorPane>
               </children>
            </AnchorPane>
         </content>
      </ScrollPane>
   </children>
</AnchorPane>
